name: tp-distribuidos-grupo13
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5673:5672"
      - "15673:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - testing_net

  server:
    container_name: server
    build:
      context: .             
      dockerfile: server/Dockerfile
    entrypoint: ["python3", "main.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - CLI_CLIENTS=1
    networks:
      - testing_net
    volumes:
      - ./server/config.ini:/config.ini:ro
      - ./utils:/server/utils:ro
      - ./middleware:/server/middleware:ro
    depends_on:
      rabbitmq:
        condition: service_healthy
  # -------------------------
  # FILTERS
  # -------------------------
  filter_year_1:
    build:
      context: .   
      dockerfile: workers/filter/Dockerfile
    container_name: filter_year_1
    command: ["python", "main.py", "--filter", "year"]
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=INFO
      - WORKER_ID=1
    volumes:
      - ./workers/filter/config/config_year.ini:/workers/filter/config/config_year.ini
      - ./utils:/workers/utils:ro
      - ./middleware:/workers/middleware:ro
    networks:
      - testing_net
    depends_on:
      server:
        condition: service_started
  # -------------------------
  # AGGREGATORS
  # -------------------------
  aggregator_products:
    build:
      context: .   
      dockerfile: workers/aggregators/Dockerfile
    container_name: aggregator_products_service
    command: ["python", "main.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=DEBUG
      - AGGREGATOR_TYPE=PRODUCTS
    volumes:
      - ./utils:/workers/utils:ro
      - ./middleware:/workers/middleware:ro
    networks:
      - testing_net
    depends_on:
      server:
        condition: service_started
  # -------------------------
  # MAXIMIZERS
  # -------------------------
  maximizer_products_1:
    build:
      context: .   
      dockerfile: workers/maximizers/Dockerfile
    container_name: maximizer_products_1_service
    command: ["python", "main.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=DEBUG
      - MAXIMIZER_TYPE=MAX
      - MAXIMIZER_RANGE=1
    volumes:
      - ./utils:/workers/utils:ro
      - ./middleware:/workers/middleware:ro
    networks:
      - testing_net
    depends_on:
      server:
        condition: service_started
  
  maximizer_products_2:
    build:
      context: .   
      dockerfile: workers/maximizers/Dockerfile
    container_name: maximizer_products_2_service
    command: ["python", "main.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=DEBUG
      - MAXIMIZER_TYPE=MAX
      - MAXIMIZER_RANGE=2
    volumes:
      - ./utils:/workers/utils:ro
      - ./middleware:/workers/middleware:ro
    networks:
      - testing_net
    depends_on:
      server:
        condition: service_started
  
  maximizer_products_3:
    build:
      context: .   
      dockerfile: workers/maximizers/Dockerfile
    container_name: maximizer_products_3_service
    command: ["python", "main.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=DEBUG
      - MAXIMIZER_TYPE=MAX
      - MAXIMIZER_RANGE=3
    volumes:
      - ./utils:/workers/utils:ro
      - ./middleware:/workers/middleware:ro
    networks:
      - testing_net
    depends_on:
      server:
        condition: service_started


  maximizer_absolute:
    build:
      context: .
      dockerfile: workers/maximizers/Dockerfile
    container_name: maximizer_absolute_service
    command: ["python", "main.py"]
    environment:
      - PYTHONUNBUFFERED=1
      - LOGGING_LEVEL=INFO
      - MAXIMIZER_TYPE=MAX
      - MAXIMIZER_RANGE=0
    volumes:
      - ./utils:/workers/utils:ro
      - ./middleware:/workers/middleware:ro
    networks:
      - testing_net
  client1:
    container_name: client1
    build:
      context: .      
      dockerfile: client/Dockerfile
    environment:
      - CLI_ID=1
      - CLI_DATA_DIR=/data
      - OUTPUT_DIR=/data/output
      - DATA_MODE=tree
      - SERVER_ADDRESS=server:12345
    networks:
      - testing_net
    depends_on:
      server:
        condition: service_started
    volumes:
      - ./.data-test/:/data:rw
      - ./.results/client-1:/data/output:rw
      - ./client/config.ini:/config.ini:ro
      - ./utils:/client/utils:ro
      - ./middleware:/client/middleware:ro
    
networks:
  testing_net:
    driver: bridge
